/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
} from "ethers";
import {
  Contract,
  ContractTransaction,
  CallOverrides,
} from "@ethersproject/contracts";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";

interface IStakeableNftInterface extends ethers.utils.Interface {
  functions: {
    "stakeableTokenType()": FunctionFragment;
    "tokenBaseLoanSize(uint256)": FunctionFragment;
    "tokenContributionAsset(uint256)": FunctionFragment;
    "tokenContributionMultiplier(uint256)": FunctionFragment;
    "tokenContributionSize(uint256)": FunctionFragment;
    "tokenURIHash(uint256)": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "stakeableTokenType",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "tokenBaseLoanSize",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "tokenContributionAsset",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "tokenContributionMultiplier",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "tokenContributionSize",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "tokenURIHash",
    values: [BigNumberish]
  ): string;

  decodeFunctionResult(
    functionFragment: "stakeableTokenType",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "tokenBaseLoanSize",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "tokenContributionAsset",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "tokenContributionMultiplier",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "tokenContributionSize",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "tokenURIHash",
    data: BytesLike
  ): Result;

  events: {};
}

export class IStakeableNft extends Contract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  on(event: EventFilter | string, listener: Listener): this;
  once(event: EventFilter | string, listener: Listener): this;
  addListener(eventName: EventFilter | string, listener: Listener): this;
  removeAllListeners(eventName: EventFilter | string): this;
  removeListener(eventName: any, listener: Listener): this;

  interface: IStakeableNftInterface;

  functions: {
    stakeableTokenType(overrides?: CallOverrides): Promise<{
      0: string;
    }>;

    "stakeableTokenType()"(overrides?: CallOverrides): Promise<{
      0: string;
    }>;

    tokenBaseLoanSize(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    "tokenBaseLoanSize(uint256)"(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    tokenContributionAsset(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      0: string;
    }>;

    "tokenContributionAsset(uint256)"(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      0: string;
    }>;

    tokenContributionMultiplier(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    "tokenContributionMultiplier(uint256)"(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    tokenContributionSize(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    "tokenContributionSize(uint256)"(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    tokenURIHash(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      0: string;
    }>;

    "tokenURIHash(uint256)"(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      0: string;
    }>;
  };

  stakeableTokenType(overrides?: CallOverrides): Promise<string>;

  "stakeableTokenType()"(overrides?: CallOverrides): Promise<string>;

  tokenBaseLoanSize(
    tokenId: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  "tokenBaseLoanSize(uint256)"(
    tokenId: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  tokenContributionAsset(
    tokenId: BigNumberish,
    overrides?: CallOverrides
  ): Promise<string>;

  "tokenContributionAsset(uint256)"(
    tokenId: BigNumberish,
    overrides?: CallOverrides
  ): Promise<string>;

  tokenContributionMultiplier(
    tokenId: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  "tokenContributionMultiplier(uint256)"(
    tokenId: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  tokenContributionSize(
    tokenId: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  "tokenContributionSize(uint256)"(
    tokenId: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  tokenURIHash(
    tokenId: BigNumberish,
    overrides?: CallOverrides
  ): Promise<string>;

  "tokenURIHash(uint256)"(
    tokenId: BigNumberish,
    overrides?: CallOverrides
  ): Promise<string>;

  callStatic: {
    stakeableTokenType(overrides?: CallOverrides): Promise<string>;

    "stakeableTokenType()"(overrides?: CallOverrides): Promise<string>;

    tokenBaseLoanSize(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "tokenBaseLoanSize(uint256)"(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    tokenContributionAsset(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;

    "tokenContributionAsset(uint256)"(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;

    tokenContributionMultiplier(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "tokenContributionMultiplier(uint256)"(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    tokenContributionSize(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "tokenContributionSize(uint256)"(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    tokenURIHash(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;

    "tokenURIHash(uint256)"(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;
  };

  filters: {};

  estimateGas: {
    stakeableTokenType(overrides?: CallOverrides): Promise<BigNumber>;

    "stakeableTokenType()"(overrides?: CallOverrides): Promise<BigNumber>;

    tokenBaseLoanSize(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "tokenBaseLoanSize(uint256)"(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    tokenContributionAsset(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "tokenContributionAsset(uint256)"(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    tokenContributionMultiplier(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "tokenContributionMultiplier(uint256)"(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    tokenContributionSize(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "tokenContributionSize(uint256)"(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    tokenURIHash(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "tokenURIHash(uint256)"(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    stakeableTokenType(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "stakeableTokenType()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    tokenBaseLoanSize(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "tokenBaseLoanSize(uint256)"(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    tokenContributionAsset(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "tokenContributionAsset(uint256)"(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    tokenContributionMultiplier(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "tokenContributionMultiplier(uint256)"(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    tokenContributionSize(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "tokenContributionSize(uint256)"(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    tokenURIHash(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "tokenURIHash(uint256)"(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;
  };
}
